CS145, Spring 2002
Solutions to Homework 1

	
Exercise 1 (5.2.4):

a.  PROJECT_{class, country}(SELECT_{bore >= 16}(Classes))
    Result: (Iowa, USA), (North Carolina, USA), (Yamato, Japan)
    
b.  PROJECT_{name}(SELECT_{launched < 1921}(Ships))
    Result: Haruna, Hiei, Kirishima, ...

c.  PROJECT_{ship}(SELECT_{result = 'sunk' AND battle = 'N. A.'}(Outcomes))
    Result: Bismarck, Hood

d.  T := Ships JOIN SELECT_{displacement > 35000}(Classes)
    PROJECT_{name}(SELECT_{launched > 1921}(T))
    Result: Iowa, Missouri, New Jersey, North Carolina, ...

e.  T1 := SELECT_{ship}(battle = 'Guadalcanal')(Outcomes)
    T2 := (T1 JOIN_{ship = name} Ships) JOIN Classes
    PROJECT_{ship, displacement, numGuns}(T2)
    Result: (Kirishima, 32000, 8), (Washington, 37000, 9)
       * Note that South Dakota does not appear in the results even though
         it participated in Guadalcanal because it is not mentioned in
	 Ships. 

f.  RENAME_{R1(name)}(PROJECT_{ship}(Outcomes)) UNION PROJECT_{name}(Ships)
    Result: Bismarck, California, ...

g.  S2 := RENAME_{S2(name2, class)}(PROJECT_{name, class}(Ships))
    T  := PROJECT_{name}(SELECT_(name <> name2)(Ships JOIN S2))
    PROJECT_{name}(Ships) - T
    Result: (none)

h.  C2 := RENAME_{C2(type2, country)}(PROJECT_{type, country}(Classes))
    PROJECT_{country}(SELECT_{type = 'bc' AND type2 = 'bb'}(Classes JOIN C2))
    Alternatively: PROJECT_{country}( SELECT_{type='bb'} Classes ) INTERSECT
                   PROJECT_{country}( SELECT_{type='bc'} Classes )
    Result: Japan, Gt. Britain

i.  T1 = Outcomes JOIN_{battle = name} Battles
    T2 := RENAME_{T2(ship, battle2, result2, name2, date2)}(T1)
    T3 := SELECT_{result = 'damaged' AND date < date2}(T1 JOIN T2)
    PROJECT_{ship}(T3)
    Result: (none)


Exercise 2:

Here's a sample DTD based on the one you will be working with in part 3 of
the project:

<!ELEMENT Items            (Item*)>
<!ELEMENT Item             (Name, Category+, First_Bid, Quantity?, Bids,
                            Location, Country, Started, Ends, Seller,
			    Description)>
<!ATTLIST Item             ItemID ID #REQUIRED>
  <!ELEMENT Name	   (#PCDATA)>
  <!ELEMENT Category	   (#PCDATA)>
  <!ELEMENT First_Bid	   (#PCDATA)>
  <!ELEMENT Quantity	   (#PCDATA)>
  <!ELEMENT Bids           (Bid*)>
    <!ELEMENT Bid          (Bidder, Time, Amount, Quantity?)>
      <!ELEMENT Bidder     (Location?, Country?)>
      <!ATTLIST Bidder     UserID CDATA #REQUIRED Rating CDATA #REQUIRED>
      <!ELEMENT Time	   (#PCDATA)>
      <!ELEMENT Amount	   (#PCDATA)>
  <!ELEMENT Location	   (#PCDATA)>
  <!ELEMENT Country	   (#PCDATA)>
  <!ELEMENT Started	   (#PCDATA)>
  <!ELEMENT Ends	   (#PCDATA)>
  <!ELEMENT Seller	   EMPTY>
  <!ATTLIST Seller         UserID CDATA #REQUIRED
	                   Rating CDATA #REQUIRED
			   OtherItems IDREFS #IMPLIED>>
  <!ELEMENT Description	   (#PCDATA)>

and a sample XML file conforming to this DTD, which we assume has been
saved in a file called "items.dtd":

<?xml version="1.0" standalone="no"?>
<!DOCTYPE Items SYSTEM "items.dtd">
<Items>
  <Item ItemID="Item-1304541573">
    <Name>NEW YEARS EVE .... WYNONNA...... IN RENO!!!!!</Name>
    <Category>Tickets &amp; Travel</Category>
    <Category>Tickets &amp; Experiences</Category>
    <Category>Event Tickets</Category>
    <Category>Concerts</Category>
    <Category>Country</Category>
    <First_Bid>$175.00</First_Bid>
    <Bids></Bids>
    <Location>OAKDALE , CA</Location>
    <Country>USA</Country>
    <Started>Nov-30-01 16:13:08 PST</Started>
    <Ends>Dec-10-01 16:13:08 PST</Ends>
    <Seller UserID="cntrygurrl" Rating="65" OtherItems="Item-1304645089"/>
    <Description>RING IN THE NEW YEAR WITH...</Description>
  </Item>
  <Item ItemID="Item-1304645089">
    <Name>GEORGE STRAIT *HOUSTON RODEO* 03/03 4 SEATS!!</Name>
    <Category>Tickets &amp; Travel</Category>
    <Category>Tickets &amp; Experiences</Category>
    <Category>Event Tickets</Category>
    <Category>Concerts</Category>
    <Category>Country</Category>
    <First_Bid>$100.00</First_Bid>
    <Bids>
      <Bid>
        <Bidder UserID="nsbdk" Rating="0">
          <Location>Hartford, CT</Location>
          <Country>USA</Country>
        </Bidder>
       <Time>Dec-01-01 03:12:31 PST</Time>
        <Amount>$111.83</Amount>
        <Quantity>1</Quantity>
      </Bid>
      <Bid>
        <Bidder UserID="sleaterk" Rating="7">
          <Location>North Arlington, NJ</Location>
          <Country>USA</Country>
        </Bidder>
        <Time>Dec-01-01 09:51:30 PST</Time>
        <Amount>$123.67</Amount>
        <Quantity>1</Quantity>
      </Bid>
    </Bids>
    <Location>OAKDALE , CA</Location>
    <Country>USA</Country>
    <Started>Nov-30-01 20:33:32 PST</Started>
    <Ends>Dec-10-01 20:33:32 PST</Ends>
    <Seller UserID="cntrygurrl" Rating="65" OtherItems="Item-1304541573"/>
    <Description>JUST IN TIME FOR CHRISTMAS...</Description>
  </Item>
</Items>


Problem 1a: The idea is to find the only ID for whom no other ID has a
higher GPA. First let 

T := PROJECT_{ID, gpa}(GPA JOIN_{gpa < gpa2} RENAME_{G2(ID2, gpa2)}(GPA))

so T contains all (ID, GPA) pairs for whom another ID has a higher GPA. We
want:

PROJECT_{name}((GPA - T) JOIN Name)


Problem 1b: Not possible. In basic relational algebra there is no mechanism for
counting the number of tuples.


Problem 2a: The difficulty in representing an XML file in relational tables
is that elements may be nested arbitrarily deep. The problem boils down to
representing a tree structure as a set of tuples. As a start, let us
represent each XML element and each piece of text (#PCDATA) as a node in a
tree. For example, the element from the lecture notes:

<Remark>
  Amazon.com says: Buy this book bundled with
  <BookRef book="ISBN-0-13-035300-0"></BookRef>,
  It's a great deal! 
</Remark> 

can be represented as an element node with tagname <Remark> having 3
children: a text node representing "Amazon.com says: Buy this book bundled
with", a <BookRef> node, and a text node representing "It's a great deal!".
Let us assign a unique ID to each node. We can now represent the XML tree
by listing its edges in a relation Edge(parent, child) where parent
and child are node ID's. However, XML takes the ordering of children into
account (what happens if children weren't ordered in the <Remark> element
above?), whereas tuples in a relation are completed unordered. Thus we add
an extra attribute to specify the order:

Edge(parent, child, order)

where a tuple (X, Y, k) in the relation Edge means that node Y is the k-th
child of node X. We can handle tagnames and attributes using the two
relations:

Tagname(ID, tagname)
Attribute(ID, attributeName, attributeValue)

Elements with multiple attributes would have multiple entries in the
Attribute relation.


Problem 2b: While the general procedure described above can handle arbitrary
tree structures, simpler methods of representing the data may exist if
regularities are known about the data. For example, if we know that all
elements in our file have exactly one attribute, then we can list both
tagnames and attributes in a single relation

Element(ID, tagname, attributeName, attributeValue)

instead of separating the Tagname and Attribute relations. 

If the tree structure is heavily restricted, it may be feasible to "flatten"
the entire tree into a single tuple. For example, suppose the "Bids" element
in the auction schema above did not allow multiple bids (that is, a (Bid?)
element type for Bids instead of (Bid*)). Then most Item elements have
nearly the same structure, with differences being in the presence or absence
of a small number of elements and attribute values. It may be more efficient
to represent each Item simply as a list (tuple) of its #PCDATA and attribute
values, corresponding to the order in which a preorder traversal of the XML
tree would encounter each value, with NULL's inserted for missing values.
The 0-or-more-element list (Bid*) can be dealt with using an auxiliary
table. You will learn to handle such complications in part 3 of the
project.
