/* Eric Roberts implementation of a hash table
 */

#include "hash.h"
#include <string.h>
#define NBuckets 101



/*
 * Type: cellT
 * ------------------------------------------------------
 * this is the struct that holds the key value pairs
 */
typedef struct cellT{
  char *key;
  char *value;
  struct cellT *link;
}cellT;



/*
 * Type: symtabCDT
 * -----------------------------------------------------------
 * this hash table is represented as an array, it should have a
 * growable linked list. The current implementation does not 
 * grow.
 */
struct symtabCDT{
  cellT *buckets[NBuckets];
};


/* Private Function Declarations
 */

static void FreeBucketChain(cellT *cp);
static cellT *FindCell(cellT *cp, char* s);
static int Hash(char *s, int nBuckets);


/* Public Entries
 */
/*
 * NewSymbolTable()
 * ---------------------------------------------------
 * create a symbol table represented as an array of 
 * NBuckets. Initialize each pointer to null;
 */
symtabADT NewSymbolTable(void)
{
   symtabADT table;
   int i;

   table =(symtabADT)malloc(sizeof(symtabADT));
   if(table == NULL){
     Failure("Creation of NewSymbolTable Failed, out of memory");
   }
   for (i=0;i<NBuckets;i++){
     table->buckets[i] = NULL;
   }
   return (table);
}

void FreeSymbolTable(symtabADT table)
{
   int i;

   for(i = 0; i < NBuckets; i++){
      FreeBucketChain(table->buckets[i]);
   }
}

void Enter(symtabADT table, char *key, char *value)
{
    int bucket;
    cellT *cp;
   
    printf("calling Enter on key:%s, value:%s",key,value);
    bucket = Hash(key, NBuckets);
    cp = FindCell(table->buckets[bucket], key);
    if(cp==NULL){ 
      cp =(cellT *)malloc(sizeof(cellT));
      cp->key = (char *)malloc(strlen(key)*sizeof(char));
      cp->value = (char *)malloc(strlen(value)*sizeof(char));
      strcpy(cp->key,key);
      strcpy(cp->value,value);
      cp->link = table->buckets[bucket];
      table->buckets[bucket] = cp;
    }
}


/* Function *Lookup(symtabADT table, char* key)
 * ---------------------------------------------
 * this function returns a NULL if the key is not
 * found in the hashtable
 */

char *Lookup(symtabADT table, char *key)
{
  int bucket;
  cellT *cp;

  printf("in Lookup\n");
  bucket = Hash(key, NBuckets);
  cp = FindCell(table->buckets[bucket], key);
  if(cp==NULL){
    return NULL;
  }
  return(cp->value);
}

/* Private Functions */

static void FreeBucketChain(cellT *cp)
{
   cellT *next;

   while(cp !=NULL){
      next = cp->link;
      free(cp->key);
      free(cp->value);
      free(cp);
      cp = next;
   }
}
/* Fucnction FindCell(cellT *cp, char *key)
 * -----------------------------------------------------
 * This function traverses for a cell in a chain beginning
 * at cp till the end is reached. If the key is not found in 
 * the chain, a NULL is returned
 */
static cellT *FindCell(cellT *cp, char *key)
{
  while(cp !=NULL && !(strcmp(cp->key,key)==0)){
    cp = cp->link;
  }
  return (cp);
}

#define Multiplier -1664117991L

static int Hash(char *s, int nBuckets)
{
   int i;
   unsigned long hashcode;


   hashcode = 0;
   for(i=0;s[i]!='\0';i++){
     hashcode = hashcode * Multiplier + s[i];
   }
   return (hashcode % nBuckets);
}



