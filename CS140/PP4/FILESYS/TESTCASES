Group: Screwed
Elias Dagher 	dagher@leland
Lionel Gresse   gresse@leland
Doug Chang      dougc@leland
CS140, Summer 1999
Homework 4


TESTCASES FILE


     The testing consists of 2 parts:

	1) Functional Testing: This section consists of 4 parts to show meeting the requirements of the assignment. We have also included additional test programs to validate functionality and robustness. 
	
		SOME ADDITIONAL ENHANCEMENTS TO AID IN TESTING ARE IMPLEMENTATION OF A RM COMMAND.

	2) Performance Testing: This section is for the cache only.


1) FUNCTIONAL TESTING:

Problem 1: Growing large files:

	Growing files to 1MB in size. We verified this in several ways, using cp to copy a large file into the DISK, and using cat to verify the content of the file. We also used wc to mesure the length of the files and genfile to generate a large file. 

Problem 2: Extensible files:

	We show addition of files into the directory file past the 10 file limit.

This is a listing of the current files in the directory at 10. 

saga12:~/cs140/pp4/filesys> SUN/nachos -f -RL
--ls
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC

Total files and directories: 10
--

We now add directories and do a listing to show directories can grow past the 10 file limit:

--mkdir sorkin
--mkdir sorkin1
--mkdir sorkin3 
--ls
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC
sorkin/
sorkin1/
sorkin3/

Total files and directories: 13
--

Additional tests we used to demonstrate the creation of a 0 length file is a demonstration of touch.

Total files and directories: 16
--touch test
--ls 
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC
mkdir
touch
mama
noshoes/
genfile
toto
test

Total files and directories: 17
--
 

--wc test   
0 0 0 test
--

This shows a file of 0 length.

Now we show how the file length is increased by copying into the file. 

Total files and directories: 17
--wc test   
0 0 0 test
--cp mkdir test2
--wc test2
3 15 1352 test2
--wc mkdir
3 15 1352 mkdir

This shows the file has successfully grown from length 0.


Problem 3: Hierarchial Name Space and file system programs mkdir, ls, cd, cat, cp, remove, wc.

mkdir:

The following shows the command mkdir test. It shows the directory test in the filesystem.

The code for mkdir is in both the test directory,the exception handler, and the shell
:
The following is a listing of mkdir.c as a standalone command mkdir.

#include "syscall.h"
void printd(int n);
void prints(char *s);
int strlen(char *s);

void main(int argc, char *argv[]){

  char *dirname;

  //get the path name from argv

  if (argc > 2 | argc < 1) {
    prints("Usage cd path\n" );
  }
  
  dirname = argv[1];

  Mkdir(dirname);



}

void prints(char *s) {
  Write(s, strlen(s), 1);
}


int strlen(char *s) {
  int i;
  
  i = 0;
  while (s[i] != '\0')
    ++i;
  return i;
}

void printd(int n) {
  if (n < 0) {
    Write("-", 1, 1);
    n=-n;
  }
  if (n / 10) { 
    printd(n / 10);
  }

  switch(n%10) {
    case 0: Write("0", 1, 1); break;
    case 1: Write("1", 1, 1); break; 
    case 2: Write("2", 1, 1); break;
    case 3: Write("3", 1, 1); break;
    case 4: Write("4", 1, 1); break;
    case 5: Write("5", 1, 1); break; 
    case 6: Write("6", 1, 1); break;
    case 7: Write("7", 1, 1); break;
    case 8: Write("8", 1, 1); break;
    case 9: Write("9", 1, 1); break;
  }
}


The following is a listing of the syscall implementation in the exception handler:

void HandleMkdir(void) {
   char *comLine;

   int  cmdLinePtr;
  // get command line
   cmdLinePtr = kernel->machine->ReadRegister(4);

  // copy command line in the kernel space
   int curChar =0;
   bool stopRead=FALSE;
   comLine = new char[60];

   do {
     kernel->memoryManager->UserToKernel(comLine+curChar, cmdLinePtr+curChar, 1);
     if ((comLine[curChar]!='\0') && ((curChar+1)<60))
       curChar++;
     else stopRead=TRUE;
     
   } while (!stopRead);

   OpenFile* MyOpenFile = NULL;
   comLine = kernel->fileSystem->ParseFile(comLine, &MyOpenFile);
   if (comLine == NULL) {
     printf("Path is invalid.\n");
     kernel->machine->WriteRegister(2,-1);
     delete comLine;
     delete MyOpenFile;
     return;
   }
   if(!kernel->fileSystem->CreateDirectoryInDir(comLine, MyOpenFile)) {
     printf("Path is invalid.\n");
     kernel->machine->WriteRegister(2,-1);
     delete comLine;
     delete MyOpenFile;
     return;
   }
   kernel->machine->WriteRegister(2,0);
   return;
 }


The following is a listing of the modifications to shell to support mkdir, ls, cd, exit, join, and halt to make testing easier.

#include "syscall.h"

char elias[]="Elias";
int strcmp(char *s, char *t);
void strcpy(char *s, char *t, char token, int offset);
void prints(char *s);
int strlen(char *s);
int
main()
{
  SpaceId newProc;
  OpenFileId input = StandardInput;
  OpenFileId output = StandardOutput;
  char prompt[2], ch, buffer[120], shellCmdBuffer[120];
  int i;
  int joinIt;
  
  prints("\n** Type 'help' at the prompt to see a list of commands\n");
  prompt[0] = '-';
  prompt[1] = '-';
  
  while( 1 )
    {
      Write(prompt, 2, output);
      
      i = 0;
      
      do {
	
	Read(&buffer[i], 1, input); 
	i++;
      } while(( buffer[i-1] != '\n') && (i<120) );
      
      buffer[--i] = '\0';
      
      if (buffer[0]!='&')
	joinIt=1;
      else 
	joinIt=0;
      strcpy(shellCmdBuffer, buffer, ' ', 0);
      if( i > 0 ) {
	if (!strcmp(shellCmdBuffer, "halt")) {
	  prints("Thank you for using Screwed OS 2000\n");
	  Halt();
	} else if (!strcmp(shellCmdBuffer, "cd")) {
	  strcpy(shellCmdBuffer, buffer, '\0', 3);
	  Chdir(shellCmdBuffer);
	} else if (!strcmp(shellCmdBuffer, "mkdir")) {
	  strcpy(shellCmdBuffer, buffer, '\0', 6);
	  Mkdir(shellCmdBuffer);
	} else if (!strcmp(shellCmdBuffer, "rm")) {
	  strcpy(shellCmdBuffer, buffer, '\0', 3);
	  Remove(shellCmdBuffer);
	} else if (!strcmp(shellCmdBuffer, "ls")) {
	  Lsdir();
	} else if (!strcmp(shellCmdBuffer, "help")) {
	  prints("Shell Commands:\n");
	  prints("cd\n");
	  prints("mkdir\n");
	  prints("rm\n");
	  prints("ls\n");
	  prints("exit\n");
	} else if (!strcmp(shellCmdBuffer, "exit")) {
          Exit(0);
	} else if (joinIt) {
	  newProc = Exec(buffer);
	  Join(newProc);
	} else newProc = Exec(buffer+1);
      } 
    }
}

void prints(char *s) {
  Write(s, strlen(s), 1);
}


int strlen(char *s) {
  int i;
  
  i = 0;
  while (s[i] != '\0')
    ++i;
  return i;
}

int strcmp(char *s, char *t) {
  for ( ; *s == *t; s++, t++)
    if (*s == '\0')
      return 0;
  return *s - *t;
}

void strcpy(char *s, char *t, char token, int offset) {
  int i;
  for (i = 0; i < offset; i++)
    t++;;
  while (*t != token && *t != '\0' ) {
    *s = *t;
    s++;
    t++;
  }
  //s++;
  *s = '\0';
}


The following is a listing of the cd and ls c test programs.


listing for the cd test program:

#include "syscall.h"
void printd(int n);
void prints(char *s);
int strlen(char *s);

void main(int argc, char *argv[]){

  char *dirname;

  //get the path name from argv

  if (argc > 2 | argc < 1) {
    prints("Usage cd path\n" );
  }
  
  dirname = argv[1];

  Chdir( dirname);
//Lsdir();


}

void prints(char *s) {
  Write(s, strlen(s), 1);
}


int strlen(char *s) {
  int i;
  
  i = 0;
  while (s[i] != '\0')
    ++i;
  return i;
}

void printd(int n) {
  if (n < 0) {
    Write("-", 1, 1);
    n=-n;
  }
  if (n / 10) { 
    printd(n / 10);
  }

  switch(n%10) {
    case 0: Write("0", 1, 1); break;
    case 1: Write("1", 1, 1); break; 
    case 2: Write("2", 1, 1); break;
    case 3: Write("3", 1, 1); break;
    case 4: Write("4", 1, 1); break;
    case 5: Write("5", 1, 1); break; 
    case 6: Write("6", 1, 1); break;
    case 7: Write("7", 1, 1); break;
    case 8: Write("8", 1, 1); break;
    case 9: Write("9", 1, 1); break;
  }
}

Listing of ls test program:

#include "syscall.h"
void printd(int n);
void prints(char *s);
int strlen(char *s);

void main(int argc, char *argv[]){


  Lsdir();



}

void prints(char *s) {
  Write(s, strlen(s), 1);
}


int strlen(char *s) {
  int i;
  
  i = 0;
  while (s[i] != '\0')
    ++i;
  return i;
}

void printd(int n) {
  if (n < 0) {
    Write("-", 1, 1);
    n=-n;
  }
  if (n / 10) { 
    printd(n / 10);
  }

  switch(n%10) {
    case 0: Write("0", 1, 1); break;
    case 1: Write("1", 1, 1); break; 
    case 2: Write("2", 1, 1); break;
    case 3: Write("3", 1, 1); break;
    case 4: Write("4", 1, 1); break;
    case 5: Write("5", 1, 1); break; 
    case 6: Write("6", 1, 1); break;
    case 7: Write("7", 1, 1); break;
    case 8: Write("8", 1, 1); break;
    case 9: Write("9", 1, 1); break;
  }
}


PRINT OUT OF ls, cd, mkdir working:

--ls
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC

Total files and directories: 10
--mkdir test
--ls
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC
test/

Total files and directories: 11
--

The following shows making a subdirectory in test with 

--mkdir /test/toto/
--ls
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC
test/


Total files and directories: 11
--cd test  
--ls
./
../
toto/

Total files and directories: 3
--

TESTING OF DIRECT, INDIRECT, and DOUBLE INDIRECT pointers.

Wrote a program called gentest that takes a file name and creates the size of the file in sectors based on the next argument of number of sectors to make the file. 


Here is a listing of genfile:

//  genfile
#define BlockSize 128
#include "syscall.h"
char progname[]="This is the GenFile program";
void prints(char *s);
int strlen(char *s);
void printd(int n);
int atoi(char s[]);
main(int argc, char *argv[])
{
  char G[BlockSize];
  int i;
  int fileId;
  int fileSize;
  fileSize = atoi(argv[2]);
  prints("Generating file of size: "); printd(fileSize*BlockSize); prints("\n");
  Create(argv[1]);
  fileId = Open(argv[1]);
  

  for (i = 0; i < BlockSize; i++) {
    G[i]='G';
  }
  //prints(G);
  for (i = 0; i < fileSize; i++) {
    Write(G , BlockSize ,fileId);
  }

  Close(fileId);
}

int strlen(char *s) {
  int i;
  
  i = 0;
  while (s[i] != '\0')
    ++i;
  return i;
}

void printd(int n) {
  if (n < 0) {
    Write("-", 1, 1);
    n=-n;
  }
  if (n / 10) { 
    printd(n / 10);
  }

  switch(n%10) {
    case 0: Write("0", 1, 1); break;
    case 1: Write("1", 1, 1); break; 
    case 2: Write("2", 1, 1); break;
    case 3: Write("3", 1, 1); break;
    case 4: Write("4", 1, 1); break;
    case 5: Write("5", 1, 1); break; 
    case 6: Write("6", 1, 1); break;
    case 7: Write("7", 1, 1); break;
    case 8: Write("8", 1, 1); break;
    case 9: Write("9", 1, 1); break;
  }
}

int atoi(char s[]) 
{
  int i, n;
  n = 0;
  for (i = 0; s[i] >= '0' && s[i]<= '9'; i++)
    n = 10 * n + (s[i] - '0');
  return n;
}
void prints(char *s) {
  Write(s, strlen(s), 1);
}


Here is a listing of the program output:

elaine0:~/cs140/pp4/filesys> SUN/nachos -cp ../test/SUN/genfile genfile
--genfile toto 1000
Generating file of size: 128000
--ls
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC
mkdir
touch
mama
noshoes/
genfile
toto

Total files and directories: 16
--wc toto
0 1 128000 toto
--


This indicates 1000 sectors were allocted correctly, testing the allocation of direct, indirect, and double indirect pointers.


Test of Remove:

This is the source listing for remove:
#include "syscall.h"
void printd(int n);
void prints(char *s);
int strlen(char *s);

void main(int argc, char *argv[]){

  char *filename;

  //get the path name from argv

  if (argc > 2 | argc < 1) {
    prints("Usage remove TARGET\n" );
  }
  
  filename = argv[1];
  Remove(filename);
}

void prints(char *s) {
  Write(s, strlen(s), 1);
}


int strlen(char *s) {
  int i;
  
  i = 0;
  while (s[i] != '\0')
    ++i;
  return i;
}

void printd(int n) {
  if (n < 0) {
    Write("-", 1, 1);
    n=-n;
  }
  if (n / 10) { 
    printd(n / 10);
  }

  switch(n%10) {
    case 0: Write("0", 1, 1); break;
    case 1: Write("1", 1, 1); break; 
    case 2: Write("2", 1, 1); break;
    case 3: Write("3", 1, 1); break;
    case 4: Write("4", 1, 1); break;
    case 5: Write("5", 1, 1); break; 
    case 6: Write("6", 1, 1); break;
    case 7: Write("7", 1, 1); break;
    case 8: Write("8", 1, 1); break;
    case 9: Write("9", 1, 1); break;
  }
}

This is the program output for remove indicating asdf was removed correctly:

laine0:~/cs140/pp4/filesys> SUN/nachos
--ls
SwapFile
shell
cp
echo
cat
remove
wc
testjoinA
testjoinB
testjoinC
mkdir
touch
mama
noshoes/
genfile
toto

Total files and directories: 16
--cd noshoes
--ls
./
../
asdf

Total files and directories: 3
--/remove asdf
--ls
./
../

Total files and directories: 2
--

NOTE: Remove was not implemented in the shell like ls or cd, hence this program is called with a "/" because it is in the root directory.



4) FUNCTIONAL TESTING:
Problem 4: File Cache and demonstration of performance. Show a workload where the cache helps, and one where it does not.

Implementation of file cache performance goals:

The following is a listing of matmult and the filecache listing of performance in cache hits and performance stats, after running matmult from the cache.

--matmult     
A array
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 
5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 
8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 
9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 
10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 
11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 
12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 
13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 
14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 
15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 
16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 
17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 
18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 
19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 
B array
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
C array before mult
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
C array after mult
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 
0 40 80 120 160 200 240 280 320 360 400 440 480 520 560 600 640 680 720 760 
0 60 120 180 240 300 360 420 480 540 600 660 720 780 840 900 960 1020 1080 1140 
0 80 160 240 320 400 480 560 640 720 800 880 960 1040 1120 1200 1280 1360 1440 1520 
0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 
0 120 240 360 480 600 720 840 960 1080 1200 1320 1440 1560 1680 1800 1920 2040 2160 2280 
0 140 280 420 560 700 840 980 1120 1260 1400 1540 1680 1820 1960 2100 2240 2380 2520 2660 
0 160 320 480 640 800 960 1120 1280 1440 1600 1760 1920 2080 2240 2400 2560 2720 2880 3040 
0 180 360 540 720 900 1080 1260 1440 1620 1800 1980 2160 2340 2520 2700 2880 3060 3240 3420 
0 200 400 600 800 1000 1200 1400 1600 1800 2000 2200 2400 2600 2800 3000 3200 3400 3600 3800 
0 220 440 660 880 1100 1320 1540 1760 1980 2200 2420 2640 2860 3080 3300 3520 3740 3960 4180 
0 240 480 720 960 1200 1440 1680 1920 2160 2400 2640 2880 3120 3360 3600 3840 4080 4320 4560 
0 260 520 780 1040 1300 1560 1820 2080 2340 2600 2860 3120 3380 3640 3900 4160 4420 4680 4940 
0 280 560 840 1120 1400 1680 1960 2240 2520 2800 3080 3360 3640 3920 4200 4480 4760 5040 5320 
0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700 
0 320 640 960 1280 1600 1920 2240 2560 2880 3200 3520 3840 4160 4480 4800 5120 5440 5760 6080 
0 340 680 1020 1360 1700 2040 2380 2720 3060 3400 3740 4080 4420 4760 5100 5440 5780 6120 6460 
0 360 720 1080 1440 1800 2160 2520 2880 3240 3600 3960 4320 4680 5040 5400 5760 6120 6480 6840 
0 380 760 1140 1520 1900 2280 2660 3040 3420 3800 4180 4560 4940 5320 5700 6080 6460 6840 7220
--halt
Thank you for using Screwed OS 2000
Machine halting!

Ticks: total 61789682, idle 60204885, system 603870, user 980927
Disk I/O: reads 55, writes 41
Console I/O: reads 16, writes 4721
Paging: faults 10598
Network I/O: packets received 0, sent 0

Disk Cache: Hits = 668 Miss = 45 Closing size = 64
elaine0:~/cs140/pp4/filesys> 



