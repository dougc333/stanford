Group: Screwed
Elias Dagher 	dagher@leland
Lionel Gresse   gresse@leland
Doug Chang      dougc@leland
CS140, Summer 1999
Homework 2

                                   -README-

Program Notes:
-------------
	
All of our changes can be identified through #ifdef PP3_1, PP3_2, and
PP3 in the included source files.  All parts must be enabled in
/threads/constants.h #define statements for this assignment to work.
Please also see the TESTCASES file for test cases that prove our functionality.



----------------------------------------------------------------------------------
General Stuff
----------------------------------------------------------------------------------

The virtual memory assingment consists of implementing a memory manager with a swap file to provide the illusion of unlimited physical memory. A software TLB functionality was added to simulate a CPU swapping in virtual to physical address translation entries. In addition to unlimited memory for multiprogram operation, we added support for memory mapped files through additional system calls. 


MEMORY MANAGEMENT ARCHITECTURE:

     The illusion of unlimited physical memory is provided by a memory manager which coordinates opertions between the TLB, an Inverted Page Table, and the simulated disk drive swap file. The memory manager updates the VPN/PPN entries in the TLB with an Inverted Page Table and a Swap File. Each process contains a page table, SegmentID, and file descriptor table (from problem 2).
     On a TLB miss, the machine simulator generates a Page Fault Exception. The exception handler recognizes a TLB miss, reads the Bad Virtual Address and looks in the IPT for a translation. 
     If the entry is not found in the IPT, the memory manager looks into the process page table for an entry. An invalid entry will cause a halt. 
     If the entry is found in the IPT, the entry is moved from the IPT to the TLB. Before writing the entry into the TLB from the IPT, the TLB entry is copied into the IPT to update the USE and DIRTY bits.
     If the entry is not found in the IPT, but found in the process PageTable, the entry is copied into the IPT and then put into the TLB.
     Stack Growth is implemented by growing the stack as programs access areas outside of the current page. We did not implement address range checking to see when and if a stack address would violate existing memory allocations. 
     Memory mapped files are implemented by copying the contents of a file into memory. User programs access the address of memory mapped files directly. The assumption in the assingment is the user knows the virtual address map of the process and will start allocation on a page boundary. 	
     The implementation of the hash table was done using a hash table, where all the entries in the hash table are valid. In our implementation, we did not use an array - which would mean a larger data structure and potentially longer search time. 
     The process page tables were changed from the last assingment to a hash table. 
     An additional hash table was added per process for keeping segmentID information.
     		
	
Implementation:


Problem 1: Software TLB
----------------------------------------------------------------------------------

A.Major Design Decisions
  1.TLB operation:
      The TLB contents were written back to the IPT on every update to the TLB and on 
      context switches. The decision on which entry to update can be done randomly,
      round robin, or using the clock algorithm as the USE bit is part of the TLB entry.
      The decision was to make the simulation of the TLB as fast as possible, a round robin 
      algorithm is the simplest and hence fastest "simulated" implementation.
	
  2.TLB Syncronization
      To keep the TLB update operation atomic, interrupts were disabled. Multiple processes
      updating the TLB not allowing current Processes to complete their operation caused problems in
      reliable updating of entries.  
	
      
 
----------------------------------------------------------------------------------
Problem 2: Implement Virtual Memory
----------------------------------------------------------------------------------
A. Major Design Decisions
   The implementation of unlimited memory was partitioned into the task of managing the virtual address/physical address
   translations. The movement of entries from the TLB, to the main mamory, and the swap file were divided into 3 managers; 1) an exception manager,2)a memory handler, and 3) a swap manager.
	
   1. Modify the exception handler:
	a. add a page fault exception handler to track all the possible types of page faults
		- check for stack growth page fault
		- check for TLB miss page fault
	b. search through the per process page tables and IPT for a virtual address the 
           machine is looking for using the existing hash IsInTable() functions. 
	d. Implement error handling if a valid virtual address is not found.
	e. 
	f. 
   2. Modify the memory manager:	
 
   3. Modify the Swap Manager:
  

    
----------------------------------------------------------------------------------
Problem 3:Memory Mapped Files
----------------------------------------------------------------------------------

A.Major Design Decisions
    1.  SC_Length, return the byte length of a file  
    2.  SC_Mmap, required copying the contents of the file to contiguous pages in the process page table.
    3.  SC_ Munmap, writing the contents from the memory to the file. 
    4.  Implement wc -l. C program to implement wc using length for the byte count. Search for a /n or space or
	contiguous white spaces.  	
    5.  Extensive Testing, we tested over 30 corner cases for the system calls since we lost the most points
        in this area from the last assingment. We tested uninititlized variables, multiple operations, and illegal
        operations that would compile but were illegal run time scenarios. A listing is provided in the test file.
    	
    1.  SC_Length call.  This was implemented testing for the end of a file, and counting the 
        number of bytes till the end of file. The error conditions we tested on this include:
		-length on a closed file
  		-length on a nonexistent file
		-length on the same file many times
		-length on an invalid file ID, -1.
 `		-length on a nonfile fileID, the standard input and output devices.
		-multiple permuations of the above cases. 
    2.  SC_Mmap: This was impelemented by:
		- retrieving the OpenFileID, and verifying a valid fileID
		- checking if there is enough space available, we first look for
  		  CONTIGUOUS pages in the swap file.
		- if they exist, we allocate swap file paes.
		- calculate a globally unique Mmap segment return value. This is an integer and
		  is locked since this is a global variable.
		- allocate PTEntries into the IPT. This is a function call, and is locked.
		
    3.  SC_Unmap: This was impelemented by:
		- retrieving the OpenFileID, and verifying a valid fileID
		- checking if there is enough space available, we first look for
  		  CONTIGUOUS pages in the swap file.
		- if they exist, we allocate swap file paes.
		- calculate a globally unique Mmap segment return value. This is an integer and
		  is locked since this is a global variable.
		- allocate PTEntries into the IPT. This is a function call, and is locked.
		- check the see the entries exist, deallocate the swap table allocation for the process
 		- remove entries from the swap table 
		- remove entries from the IPT
		- remove entries from the segementIDtable

   





